name: Build, Test, and Analyze

on:
  push:
    branches:
      - main

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest
    container: mntmtt/sourcevaultdev:latest

    steps:
      - name: Check out source code
        uses: actions/checkout@v4
        with:
          # Fetch all history for all branches. This is required for SonarQube's analysis.
          fetch-depth: 0

      - name: Cache SonarQube Scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: sonar-scanner-cli-7.2.0.5079-linux-x64

      - name: Download and Prepare SonarQube Scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./.sonar/scanner
          wget -q -P ./.sonar/scanner https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.2.0.5079-linux-x64.zip
          unzip -q ./.sonar/scanner/sonar-scanner-cli-7.2.0.5079-linux-x64.zip -d ./.sonar/scanner
          mv ./.sonar/scanner/sonar-scanner-7.2.0.5079-linux-x64 ./.sonar/scanner/cli

      - name: Configure and Build Project
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=--coverage
          cmake --build build -j$(nproc)

      - name: Run Tests to Generate Coverage Data
        run: |
          cd build
          ctest --extra-verbose
          cd ..

      - name: Generate Gcov Reports
        run: |
          cd build
          # Find all object files, but exclude paths containing "tests" or "autogen"
          find . -type f -name "*.o" \
            -not -path "*/tests/*" \
            -not -path "*_autogen/*" \
            | xargs gcov --preserve-paths
          cd ..

      # Run the scanner from within the container
      - name: Run SonarQube Analysis
        run: |
          ./.sonar/scanner/cli/bin/sonar-scanner \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}